version: 2.1

jobs:
  test:
    docker:
      - image: node:10.15.3-jessie
        environment:
          BT_ES_ENDPOINT: http://es:9200
          BT_MONGO_ENDPOINT: mongodb://mongo/dev
          BT_SMTP_HOST: smtp
          BT_SMTP_PORT: 25
          BT_S3_ENDPOINT: http://s3:4569/
      - image: mongo:2.6.8
        name: mongo
      - image: elasticsearch:6.5.4
        name: es
        environment:
          discovery.type: single-node
      - image: lphoward/fake-s3:latest
        name: s3
      - image: tecnativa/smtp-sink:latest
        name: smtp
    steps:
      - checkout
      - restore_cache:
          keys:
            - bt_core_{{ checksum "package.json" }}
            - bt_core_
      - run:
          name: Get Zip
          command: apt update && apt install -y zip
      - run:
          name: Database Maintenance Lambda Dependencies
          working_directory: lambda/db-maintenance
          command: |
            npm install
      - run:
          name: Test
          command: |
            npm install -g gulp-cli nyc
            npm install
            gulp lint
            nyc gulp test
            npm run coverage
          environment:
            NODE_ENV: test
      - run:
          name: Package Database Maintenance Lambda
          working_directory: lambda/db-maintenance
          command: zip -rq ../db-maintenance.zip index.js node_modules/
      - save_cache:
          key: bt_core_{{ checksum "package.json" }}
          paths:
            - node_modules/
            - lambda/db-maintenance/node_modules/
      - persist_to_workspace:
          root: lambda/
          paths:
            - db-maintenance.zip

  validate-terraform:
    docker:
      - image: hashicorp/terraform:0.11.10
    steps:
      - checkout
      - run:
          name: Validate Terraform
          working_directory: terraform/env/dev/us-east-1
          command: |
            echo "mongodb_endpoint = \"$DEV_DATABASE\"" >> secret.tfvars
            echo "es_endpoint = \"$DEV_ELASTICSEARCH\"" >> secret.tfvars
            echo "google_client_secret = \"$GOOGLE_CLIENT_SECRET\"" >> secret.tfvars
            echo "build_number = \"$(cat ../../build)\"" >> secret.tfvars
            echo "smtp_auth_password = \"$DEV_SMTP_PASSWORD\"" >> secret.tfvars
            echo "smtp_auth_username = \"$DEV_SMTP_USERNAME\"" >> secret.tfvars
            echo "smtp_host = \"$DEV_SMTP_HOST\"" >> secret.tfvars
            echo "smtp_port = \"$DEV_SMTP_PORT\"" >> secret.tfvars
            echo "smtp_use_tls = true" >> secret.tfvars
            terraform init -from-module=../../../modules/ -backend-config="key=dev.us-east-1.tfstate"
            terraform validate -var-file=config.tfvars -var-file=secret.tfvars
            terraform plan -var-file secret.tfvars -var-file config.tfvars > /dev/null

  deploy-image-dev:
    machine:
      enabled: true
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build -t bottom-time/core .
      - run:
          name: Deploy Docker Image
          command: |
            $(aws ecr get-login --no-include-email --region us-east-1)
            docker tag bottom-time/core:latest 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core:latest
            docker push 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core:latest
            docker tag bottom-time/core:latest 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core:$CIRCLE_BUILD_NUM
            docker push 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core:$CIRCLE_BUILD_NUM
            mkdir temp/
            echo $CIRCLE_BUILD_NUM > temp/build
      - persist_to_workspace:
          root: temp/
          paths:
            - build

  deploy-image-prod:
    machine:
      enabled: true
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build -t bottom-time/core .
      - run:
          name: Deploy Docker Image
          command: |
            $(aws ecr get-login --no-include-email --region us-east-1)
            docker tag bottom-time/core:latest 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core-prod:latest
            docker push 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core-prod:latest
            docker tag bottom-time/core:latest 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core-prod:$CIRCLE_BUILD_NUM
            docker push 961445962603.dkr.ecr.us-east-1.amazonaws.com/bottom-time/core-prod:$CIRCLE_BUILD_NUM
            mkdir temp/
            echo $CIRCLE_BUILD_NUM > temp/build
      - persist_to_workspace:
          root: temp/
          paths:
            - build

  terraform-dev:
    docker:
      - image: hashicorp/terraform:0.11.10
    steps:
      - checkout
      - attach_workspace:
          at: terraform/env/
      - run:
          name: Deploy Dev Environment
          working_directory: terraform/env/dev/us-east-1
          command: |
            mv ../../db-maintenance.zip ../../../modules/resources/
            echo "mongodb_endpoint = \"$DEV_DATABASE\"" >> secret.tfvars
            echo "es_endpoint = \"$DEV_ELASTICSEARCH\"" >> secret.tfvars
            echo "google_client_secret = \"$GOOGLE_CLIENT_SECRET\"" >> secret.tfvars
            echo "build_number = \"$(cat ../../build)\"" >> secret.tfvars
            echo "smtp_auth_password = \"$DEV_SMTP_PASSWORD\"" >> secret.tfvars
            echo "smtp_auth_username = \"$DEV_SMTP_USERNAME\"" >> secret.tfvars
            echo "smtp_host = \"$DEV_SMTP_HOST\"" >> secret.tfvars
            echo "smtp_port = \"$DEV_SMTP_PORT\"" >> secret.tfvars
            echo "smtp_use_tls = true" >> secret.tfvars
            terraform init -from-module=../../../modules/ -backend-config="key=dev.us-east-1.tfstate"
            terraform apply -auto-approve -var-file secret.tfvars -var-file config.tfvars > /dev/null

  terraform-prod:
    docker:
      - image: hashicorp/terraform:0.11.10
    steps:
      - checkout
      - attach_workspace:
          at: terraform/env/
      - run:
          name: Deploy Prod Environment
          working_directory: terraform/env/prod/us-east-1
          command: |
            mv ../../db-maintenance.zip ../../../modules/resources/
            echo "mongodb_endpoint = \"$PROD_DATABASE\"" >> secret.tfvars
            echo "es_endpoint = \"$PROD_ELASTICSEARCH\"" >> secret.tfvars
            echo "google_client_secret = \"$GOOGLE_CLIENT_SECRET\"" >> secret.tfvars
            echo "build_number = \"$(cat ../../build)\"" >> secret.tfvars
            echo "session_secret = \"$PROD_SESSION_SECRET\"" >> secret.tfvars
            echo "smtp_auth_password = \"$PROD_SMTP_PASSWORD\"" >> secret.tfvars
            echo "smtp_auth_username = \"$PROD_SMTP_USERNAME\"" >> secret.tfvars
            echo "smtp_host = \"$PROD_SMTP_HOST\"" >> secret.tfvars
            echo "smtp_port = \"$PROD_SMTP_PORT\"" >> secret.tfvars
            echo "smtp_use_tls = true" >> secret.tfvars
            terraform init -from-module=../../../modules/ -backend-config="key=prod.us-east-1.tfstate"
            terraform apply -auto-approve -var-file secret.tfvars -var-file config.tfvars > /dev/null

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - test
      - validate-terraform
      - deploy-image-dev:
          requires:
            - test
            - validate-terraform
          filters:
            branches:
              only:
                - master
      - deploy-image-prod:
          requires:
            - test
            - validate-terraform
          filters:
            branches:
              only:
                - prod
      - terraform-dev:
          requires:
            - deploy-image-dev
          filters:
            branches:
              only:
                - master
      - terraform-prod:
          requires:
            - deploy-image-prod
          filters:
            branches:
              only:
                - prod
